let map,
    userPosition,
    markersCollection,
    currentWeather,
    lastClickCoords = null, // –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∫–ª–∏–∫–∞ –ø–æ –∫–∞—Ä—Ç–µ.
    currentRoute = null;    // –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ—Å—Ç—Ä–æ–µ–Ω–Ω–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞.

ymaps.ready(initializeApp);

function initializeApp() {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Ä—Ç—ã
    map = new ymaps.Map('map', {
        center: CONFIG.DEFAULT_MAP_CENTER,
        zoom: CONFIG.DEFAULT_ZOOM,
        controls: ['zoomControl', 'typeSelector', 'fullscreenControl', 'routeButtonControl']
    });

    // –°–æ–∑–¥–∞–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏—é –º–∞—Ä–∫–µ—Ä–æ–≤
    markersCollection = new ymaps.GeoObjectCollection();
    map.geoObjects.add(markersCollection);

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ API
    checkBrowserSupport();

    // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–∞–Ω–Ω—ã—Ö
    restoreLastLocation();
    restoreMarkers();
    renderSavedMarkersList();

    setupEventListeners();
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ HTML5 API
function checkBrowserSupport() {
    const supportDiv = document.getElementById('browserSupport');
    const checks = [
        { name: '–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è', supported: !!navigator.geolocation },
        { name: 'LocalStorage', supported: !!window.localStorage },
        { name: 'Fetch API', supported: !!window.fetch }
    ];

    supportDiv.innerHTML = checks.map(check =>
        `<p>${check.name}: ${check.supported ? '‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è' : '‚ùå –ù–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è'}</p>`
    ).join('');
}

// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
function setupEventListeners() {
    document.getElementById('geoButton').addEventListener('click', getCurrentLocation);
    document.getElementById('addMarkerButton').addEventListener('click', openMarkerModal);
    document.getElementById('routeButton').addEventListener('click', handleRouteButton);
    document.getElementById('clearDataButton').addEventListener('click', clearAllData);

    document.getElementById('markerForm').addEventListener('submit', handleMarkerSubmit);
    document.getElementById('cancelMarker').addEventListener('click', closeMarkerModal);

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –∫–∞—Ä—Ç–µ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –º–µ—Ç–∫–∏
    map.events.add('click', event => {
        lastClickCoords = event.get('coords');
        openMarkerModal();
    });
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function getCurrentLocation() {
    if (navigator.geolocation) {
        navigator.geolocation.getCurrentPosition(
            position => {
                userPosition = [
                    position.coords.latitude,
                    position.coords.longitude
                ];
                saveUserLocation(userPosition);
                map.setCenter(userPosition, 12);
                addUserMarker(userPosition);
                fetchWeatherForLocation(userPosition);
            },
            handleGeolocationError,
            { enableHighAccuracy: true, timeout: 5000, maximumAge: 0 }
        );
    } else {
        alert("–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤–∞—à–∏–º –±—Ä–∞—É–∑–µ—Ä–æ–º");
    }
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≥–µ–æ–ø–æ–∑–∏—Ü–∏–∏ –≤ localStorage
function saveUserLocation(coords) {
    localStorage.setItem(
        CONFIG.STORAGE_KEYS.USER_LOCATION,
        JSON.stringify({
            coords: coords,
            timestamp: new Date().toISOString()
        })
    );
}

// –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –≥–µ–æ–ø–æ–∑–∏—Ü–∏–∏
function restoreLastLocation() {
    const saved = localStorage.getItem(CONFIG.STORAGE_KEYS.USER_LOCATION);
    if (saved) {
        const data = JSON.parse(saved);
        userPosition = data.coords;
        // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ —É—Å—Ç–∞—Ä–µ–ª–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö (–≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 24 —á–∞—Å–æ–≤)
        if (new Date(data.timestamp) > new Date(new Date().getTime() - 24 * 60 * 60 * 1000)) {
            map.setCenter(userPosition, 12);
            addUserMarker(userPosition);
            fetchWeatherForLocation(userPosition);
        }
    }
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–∞—Ä–∫–µ—Ä–∞ —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è
function addUserMarker(coords) {
    removeUserLocationMarker();
    const userMarker = new ymaps.Placemark(
        coords,
        { balloonContent: '–í–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ' },
        { preset: 'islands#blueCircleDotIcon' }
    );
    userMarker.properties.set('isUserLocation', true);
    markersCollection.add(userMarker);
}

// –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –º–∞—Ä–∫–µ—Ä–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
function removeUserLocationMarker() {
    markersCollection.each(obj => {
        if (obj.properties.get('isUserLocation')) {
            markersCollection.remove(obj);
        }
    });
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ —á–µ—Ä–µ–∑ API –Ø–Ω–¥–µ–∫—Å.–ü–æ–≥–æ–¥—ã
async function fetchWeatherForLocation(coords) {
    try {
        const [lat, lon] = coords;
        let response = await axios.get(CONFIG.WEATHER_API_URL, {
            params: {
                lat: lat,
                lon: lon,
                lang: 'ru_RU'
            },
            headers: {
                'X-Yandex-API-Key': CONFIG.API_KEYS.YANDEX_WEATHER
            }
        });
        currentWeather = {
            temperature: response.data.fact.temp,
            description: response.data.fact.condition
        };
        displayWeather(currentWeather);
        return currentWeather;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã:', error);
        return null;
    }
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–≥–æ–¥—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
function displayWeather(weather) {
    const weatherDiv = document.getElementById('currentWeather');
    weatherDiv.innerHTML = `
    üå°Ô∏è ${weather.temperature}¬∞C, ${weather.description}
  `;
}

// –û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–µ—Ç–∫–∏
function openMarkerModal() {
    if (!lastClickCoords && !userPosition) {
        alert("–°–Ω–∞—á–∞–ª–∞ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –∏–ª–∏ –∫–ª–∏–∫–Ω–∏—Ç–µ –ø–æ –∫–∞—Ä—Ç–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–µ—Ç–∫–∏.");
        return;
    }
    document.getElementById('markerModal').style.display = 'block';
}

// –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
function closeMarkerModal() {
    document.getElementById('markerModal').style.display = 'none';
    lastClickCoords = null;
    document.getElementById('markerForm').reset();
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–µ—Ç–∫–∏
async function handleMarkerSubmit(event) {
    event.preventDefault();
    let coords = lastClickCoords ? lastClickCoords : userPosition;
    if (!coords) return;

    const name = document.getElementById('markerName').value;
    const description = document.getElementById('markerDescription').value;
    const category = document.getElementById('markerCategory').value;
    const timestamp = new Date().toISOString();

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ –¥–ª—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –º–µ—Ç–∫–∏
    let weather = await fetchWeatherForLocation(coords);

    const markerData = {
        coords: coords,
        name: name,
        description: description,
        category: category,
        timestamp: timestamp,
        weather: weather
    };

    addCustomMarker(markerData);
    saveMarkerToLocalStorage(markerData);
    renderSavedMarkersList();

    closeMarkerModal();
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –º–∞—Ä–∫–µ—Ä–∞ –Ω–∞ –∫–∞—Ä—Ç—É —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–≥–æ–¥–µ –∏ —Å—Å—ã–ª–∫–æ–π –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞
function addCustomMarker(markerData) {
    const { coords, name, description, category, timestamp, weather } = markerData;
    let balloonContentBody = `
    <strong>–û–ø–∏—Å–∞–Ω–∏–µ:</strong> ${description}<br>
    <strong>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</strong> ${category}<br>
    <strong>–°–æ–∑–¥–∞–Ω:</strong> ${new Date(timestamp).toLocaleString()}<br>
    <strong>–ü–æ–≥–æ–¥–∞:</strong> ${weather ? (weather.description + ', ' + weather.temperature + '¬∞C') : '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}<br>
    <a href="#" onclick='createRouteFromMarker(${JSON.stringify(coords)})'>–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç</a>
  `;

    const customMarker = new ymaps.Placemark(
        coords,
        {
            balloonContentHeader: name,
            balloonContentBody: balloonContentBody,
            hintContent: name
        },
        {
            preset: getCategoryIcon(category)
        }
    );
    markersCollection.add(customMarker);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞ –∏–∑ –±–∞–ª—É–Ω–∞ –º–µ—Ç–∫–∏
function createRouteFromMarker(markerCoords) {
    if (!userPosition) {
        alert("–°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∏—Ç–µ –≤–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ");
        return;
    }
    createRoute(userPosition, markerCoords);
    map.balloon.close();
}

// –í—ã–±–æ—Ä –∏–∫–æ–Ω–∫–∏ –¥–ª—è –º–µ—Ç–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
function getCategoryIcon(category) {
    const icons = {
        restaurant: 'islands#redEatingIcon',
        attraction: 'islands#blueArchitectureIcon',
        park: 'islands#greenParkIcon',
        shop: 'islands#blueFashionIcon',
        default: 'islands#blueCircleDotIcon'
    };
    return icons[category] || icons['default'];
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –º–µ—Ç–∫–∏ –≤ localStorage
function saveMarkerToLocalStorage(markerData) {
    let savedMarkers = JSON.parse(localStorage.getItem(CONFIG.STORAGE_KEYS.MARKERS) || '[]');
    savedMarkers.push(markerData);
    localStorage.setItem(CONFIG.STORAGE_KEYS.MARKERS, JSON.stringify(savedMarkers));
}

// –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç–æ–∫ –∏–∑ localStorage
function restoreMarkers() {
    const savedMarkers = JSON.parse(localStorage.getItem(CONFIG.STORAGE_KEYS.MARKERS) || '[]');
    savedMarkers.forEach(marker => {
        addCustomMarker(marker);
    });
}

// –í—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–∫ –≤ —Å–∞–π–¥–±–∞—Ä–µ
function renderSavedMarkersList() {
    const listDiv = document.getElementById('savedMarkersList');
    let savedMarkers = JSON.parse(localStorage.getItem(CONFIG.STORAGE_KEYS.MARKERS) || '[]');
    if (!savedMarkers.length) {
        listDiv.innerHTML = "<p>–ú–µ—Ç–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç</p>";
        return;
    }
    listDiv.innerHTML = "";
    savedMarkers.forEach((marker, index) => {
        let markerElem = document.createElement('p');
        markerElem.textContent = marker.name || `–ú–µ—Ç–∫–∞ ${index + 1}`;
        markerElem.addEventListener('click', () => {
            map.setCenter(marker.coords, 14);
            if (userPosition) {
                createRoute(userPosition, marker.coords);
            }
        });
        listDiv.appendChild(markerElem);
    });
}

// –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –º–µ—Ç–æ–¥–∞ ymaps.route(), —Å–æ–≥–ª–∞—Å–Ω–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –∫ API
function createRoute(startCoords, endCoords) {
    // –ï—Å–ª–∏ —Ä–∞–Ω–µ–µ –ø–æ—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç ‚Äì —É–¥–∞–ª—è–µ–º –µ–≥–æ
    if (currentRoute) {
        map.geoObjects.remove(currentRoute);
        currentRoute = null;
    }

    ymaps.route([startCoords, endCoords], { routingMode: 'auto' })
        .then(function (route) {
            currentRoute = route;
            map.geoObjects.add(route);
        })
        .catch(function (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞:', error);
            alert('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç.');
        });
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç" –≤ —Å–∞–π–¥–±–∞—Ä–µ
function handleRouteButton() {
    let savedMarkers = JSON.parse(localStorage.getItem(CONFIG.STORAGE_KEYS.MARKERS) || '[]');
    if (savedMarkers.length && userPosition) {
        let lastMarker = savedMarkers[savedMarkers.length - 1];
        createRoute(userPosition, lastMarker.coords);
    } else {
        alert("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π –º–µ—Ç–∫–∏ –∏–ª–∏ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è.");
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
function handleGeolocationError(error) {
    console.error('–û—à–∏–±–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏:', error);
    alert(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏: ${error.message}`);
}

// –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ localStorage –∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
function clearAllData() {
    localStorage.removeItem(CONFIG.STORAGE_KEYS.USER_LOCATION);
    localStorage.removeItem(CONFIG.STORAGE_KEYS.MARKERS);
    location.reload();
}